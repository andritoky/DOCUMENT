Angular courses : 

ERREUR : error TS2564: Property 'hotelForm' has no initializer and is not definitely assigned in the constructor.
SOLUTION : tsconfig.json
    "strictPropertyInitialization": false
 ou "strict": false,


- Enregistrer une composante (Bootstrapping):
Dans app.module 
declarations: [
    AppComponent,
    CoursesComponent,
  ],

- Directives structurelles ngFor & ngIf:
<h2 *ngIf="liste && liste.length > 0">{{title}}</h2>  // si condition verifier afficher

<div class="row" *ngFor=" let liste of listes">
        <h5 class="card-title">{{liste.hotelName}}</h5>
        <p class="card-text">{{liste.description}}</p>
</div>

- Les Pipes: Transformer les proprietes avant de les afficher
<p>Price : {{liste.price | currency | lowercase}}</p>
currency , lowercase , uppercase , date , percent , decimal , json , slice , async , ...

exeption : 
<p>{{liste.price | currency:'EUR':'symbol':'1.2-2':'fr' | lowercase}}</p> Erreur
add app.module : 
import { registerLocaleData } from '@angular/common';
import localeFr from '@angular/common/locales/fr'
registerLocaleData(localeFr, 'fr');

- cycles de vie: Les plus utiliser
OnInit : initialisation 
OnChange : en cas de changement , ou en cas de propriete binding
OnDestroy : Destruction
ngDoCheck : il est appelé après chaque détection de changements

- Créer un Pipe personnalisé:? Voir tuto

- Communication :
  Parent Enfant : @Input()
  Enfant Parent  : @Output()

  Enfant :
  public rating: any = 12;
  @Output()
  public starRatingClicked: EventEmitter<string> = new EventEmitter<string>();
  public sendRating(): void {
    this.starRatingClicked.emit(this.rating)
  }
  <div (click)="sendRating()">  : declenche l'event pour que le parent recoit (starRatingClicked)="receiveRatingClick($event)"

  Parent:
  <app-start-rating [rating]="liste.rating" (starRatingClicked)="receiveRatingClick($event)"></app-start-rating>
  public receiveRatingClick(event_rating: any) {
    console.log("Rating :", event_rating);
    this.clickSendRating = event_rating
  }

- Boostrap icone :
npm i ngx-bootstrap-icons --save
import { alarm-fill } from 'ngx-bootstrap-icons';
<i-bs name="alarm-fill"></i-bs>


- Services et l'injection des dépendances:

import { Injectable } from "@angular/core";

@Injectable({
    providedIn: 'root'  //Pour le autowiring soit possible dans les component si non erreu
})
export class ClientService {
    public getHotels() {
        return listes
    }
public async getClient() {
        let reponse = await fetch(`http://localhost:8000/api/client/get`)
        let data = await reponse.json()
        return data
    }
}
//Injectable  permet d'enregistrer le Class au system d'injection d'angular
 componant injection de depandance: 
  private _clientService;
  constructor( private clientService: ClientService) {
    this._clientService = clientService;
  }


- RxJS et les Observables :(Asynchrone)
  RxJS : bibliotheque JS  (Http ,form , router )


- Requette service :
  Observable.subscribe(Observer)
  Observable.subscribe(
    nextFn,       // Recois les objects chaque foi emit par l'Observable
    errorFn,      // Return chaque fois que l observable rejet l'error
    completeFn    // Return quand le dernier element et arrivé depuis l'observable
  )

Possible :
  let subscription  = Observable.subscribe(Observer)
  //plus tard
  subscription.unsubscribe()


- HttpClient : 

  Dans app.module.ts :a dd HttpClientModule

  Dans Service : 
   private readonly HOTEL_API_URL = "url_api";

    constructor(private http: HttpClient) { }

    public getHotels(): Observable<IHotel[]> {
        return this.http.get<IHotel[]>(this.HOTEL_API_URL).pipe(
            tap((hotels: IHotel[]) => console.log('hotelsHttp:', hotels)),
            catchError(this.handleError)
        )
    }

    private handleError(error: HttpErrorResponse) {
        if (error.error instanceof ErrorEvent) {
            console.error('An error occurred :', error.error.message);
        } else {
            console.error(
                'Backend return code' + error.status + ', Body was : ' + error.error
            );
        }
        return throwError('Somethig bad happened ; please try again later')
    }

  Dans component : 
   this._httpHotels.getHotels().subscribe({
      next: hotels => {
        this.listeFilter = hotels
      },
      error: err => this.errorMsg = err
    });

  Si use api/data.json : add dans angular.json : 
   "build": {
          "builder": "@angular-devkit/build-angular:browser",
          "options": {
            "assets": [
              "src/api"
            ],

- Navigation avec le routerLink et router-outlet:

  app.module.ts:

  import { RouterModule } from '@angular/router'
  imports: [
    RouterModule.forRoot([
      { path: 'home', component: HomeComponent },
      { path: '', redirectTo: 'home', pathMatch: 'full' },
      { path: 'hotels/:id', component: DetailComponent },
      { path: 'hotels', component: HotelComponent },
      { path: '**', redirectTo: 'home', pathMatch: 'full' },])
  ]

  Dans parent : 
  <router-outlet></router-outlet>

  Component : 
  <li routerLinkActive="active">    // action si link correspond
     <a class="nav-link" [routerLink]="['/hotels']">Listes</a>
  </li>
  
  <button [routerLink]="['/hotels/', liste.hotelId ]" class="btn btn-dark">Detail</button>

- Parametre: path: 'hotels/:id'

  Facon 1 : 
            constructor() { private route : ActivatedRoute}
            ngOnInit(): void { 
               const id =  +this.route.snapshot.paramMap.get('id');   // =+ Conversion  string en number
            }


- Navigation :

  <button class="btn btn-outline-info" (click)="backToList()">
        retour a la liste
  </button>

  constructor(private router: Router) {}
  public backToList(): void {
    this.router.navigate(['/hotels']);
  }


- Angular GARDE : 

  canActivate:  Suveiller l'acces a un url
  canDeactivate: Suveiller la navigation en quittant l' url
  Resolver: Recuperer des donnée avant de charger l 'url
  canLoad: Prevenir la navigation asychrone
  
  ng g g hotel/detail : cree un service de garde pour Detail
  app.module.ts : { path: 'hotels/:id', component: DetailComponent, canActivate: [DetailGuard] }
  
  Dans "detail.guard":
  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): boolean{
    const id = +route.url[1].path;
    if (isNaN(id) || id <= 0) {
      alert('Hotel inconnu !!')
      this.router.navigate(['/hotels'])
    }
    return true;
  }
  
  
- NgModule : 
  
  Uniquement dans app.component :  bootstrap: [AppComponent] Le component appelé au demarage
  
  ng g m hotel/hotel --flat -m app
  Dans doc hotel/ creer hotel.module.ts "hotel/hotel" et mettre a jour app.module.ts "--flat -m app"

  Dans app.module.ts : imports: [HotelModule]
  Dans hotel.module.ts : imports: [CommonModule , RouterModule.forChild([])]    CommonModule: acces a "ngif et ngfor" dans tous les sous module
  
  Puis importer les element neccessaire
  Et redemarer server
  

  ng g m shared/shared --flat -m hotel/hotel.module 
  Dans doc shared/ creer shared.module.ts et inject hotel.module.ts "--flat -m hotel/hotel.module"
  
  Regle :
  Si app.module.ts : imports: [HotelModule]
  Et hotel.module.ts : imports: [SharedModule] 

  Pour que app.module a acces a "SharedModule" 
  Add a share.module.ts : 
    exports: [
      Ici tous ce que je veut que app.module a acces : depandence , component ,...
  ],

  

  BrowserModule: ngif & ngfor
  CommonModule: Directive ngif & ngfor
  RouterModule et HttpClient : Requette http



- Separé les ROUTE : 
  Pour app.module : ng g m app-my-routing --flat
  imports: [
    RouterModule.forRoot([
      { path: 'home', component: HotelComponent },
    ]),
  ]
  et dans app.module.ts : 
  imports: [
    AppMyRoutingModule, ::: En dernier position pour eviter les comflit
  ],


- Angular FORMULAIRE:
  <form novalidate [formGroup]="hotelForm">
   Si  [formGroup]="hotelForm" pas reconnus 
   imports: [
    ReactiveFormsModule,
   ]
  